// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	/* store output into A Register, D Register, or M (RAM[A]) RESPECTIVELY */
	/* Mux between possible inputs and load bits if the instruction is a or c */
	And(a=instruction[15], b=instruction[5], out=CA);
	Not(in=instruction[15], out=not15);
	Mux(a=not15, b=CA, sel=instruction[15], out=load);
	Mux16(a=instruction, b=output, sel=instruction[15], out=in);
	ARegister(in=in, load=load, out=A, out[0..14]=addressM); /* A Register */

	And(a=instruction[15], b=instruction[4], out=CD);
	DRegister(in=output, load=CD, out=D); /* D Register */

	/* IF C INSTRUCTION */
	/* generate outputs for each possible calculation -> Mux16 based on a bit */
	ALU(x=D, y=inM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=DMresult, zr=DMresultZR, ng=DMresultNG);
	ALU(x=D, y=A, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=DAresult, zr=DAresultZR, ng=DAresultNG);
	Mux16(a=DAresult, b=DMresult, sel=instruction[12], out=output, out=outM);
	/* idk what to do with these */
	Mux(a=DAresultZR, b=DMresultZR, sel=instruction[12], out=outZR);
	Mux(a=DAresultNG, b=DMresultNG, sel=instruction[12], out=outNG);

	/* writeM */
	And(a=instruction[3], b=instruction[15], out=writeM);
	
	/* pc from jump bits */
	Or(a=outZR, b=outNG, out=outZRorNG);
	Not(in=outZRorNG, out=outPS);
	And(a=instruction[2], b=outNG, out=a);
	And(a=instruction[1], b=outZR, out=b);
	And(a=instruction[0], b=outPS, out=c);
	Or(a=a, b=b, out=ab);
	Or(a=ab, b=c, out=j);
	And(a=instruction[15], b=j, out=jump);
	Not(in=jump, out=inc);
	PC(in=A, load=jump, inc=inc, reset=reset, out=prev, out[0..14]=pc);
}
